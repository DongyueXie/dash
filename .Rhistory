out <- dash(xmat, optmethod = "mixEM", verbose=TRUE, bf=TRUE)
out$datamean
out$posmean
comp_data <- t(deng.counts)
system.time(out <- dash(comp_data = t(deng.counts),
optmethod = "mixEM",
mode = colMeans(comp_data),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
library(singleCellRNASeqMouseDeng2014)
deng.counts <- Biobase::exprs(Deng2014MouseESC)
deng.meta_data <- Biobase::pData(Deng2014MouseESC)
deng.gene_names <- rownames(deng.counts)
library(dash)
comp_data <- t(deng.counts)[1:5,]+1
system.time(out <- dash(comp_data = comp_data,
optmethod = "mixEM",
mode = colMeans(comp_data),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posmean
out$posterior_weights
devtools::document()
library(dash)
colMeans(comp_data)
comp_data <- t(deng.counts)[1:5,]+1
system.time(out <- dash(comp_data = comp_data,
optmethod = "mixEM",
mode = colMeans(comp_data),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posmean
out$posterior_weights
seq(1, 500, length.out = 50)
x1 <- rep(1, 10000)
x1[floor(seq(1, 500, length.out = 50))] <- 0
x1
x1 <- rep(1, 10000)
x1[floor(seq(1, 500, length.out = 50))] <- 0
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = colMeans(mat),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = colMeans(mat),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = colMeans(mat),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1, 0.1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
dim(mat)
mat[1,]
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = colMeans(mat),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posmean
out$posterior_weights
out$posmean[1:2,1:10]
dim(out$posmean)
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = x2,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
out$posmean[1:2,1:10]
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x1[10] <- 10
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = x2,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
max(mat)
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x1[10] <- 1000
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = x2,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x1[10] <- 10000
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = x2,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
x1 <- rep(1, 10000)
x1[floor(seq(1, 10000, length.out = 5000))] <- 0
x1[10] <- 100
x2 <- rep(1, 10000)
mat <- rbind(x1, x2)
system.time(out <- dash(comp_data = mat,
optmethod = "mixEM",
mode = x2,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
library(devtools)
install_github("kkdey/ecostructure")
devtools::install("../ecostructure/")
library(ecostructure)
comp_data <- t(deng.counts)[1:5,]+1
system.time(out <- dash(comp_data = comp_data,
optmethod = "mixEM",
mode = rep(1, dim(comp_data)[2]),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
deng.meta_data$cell_type[1:5]
deng.meta_data$cell_type[1:4]
comp_data <- t(deng.counts)[1:4,]+1
system.time(out <- dash(comp_data = comp_data,
optmethod = "mixEM",
mode = colMeans(comp_data),
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
tmp <- out$datamean  - out$posmean
max(temp)
max(tmp)
tmp[1:5,1:10]
tmp[1:4,1:10]
comp_data[1,] - comp_data[2,]
library(devtools)
install_github("kkdey/ecostructure")
devtools::install_github("kkdey/CountClust")
install_github("kkdey/ecostructure")
library(ecostruvture)
library(ecostructure)
devtools::install_github("kkdey/ordtpx")
library(ecostructure)
install.packages("lattice")
install.packages("latticeExtra")
library(ecostructure)
install_github("kkdey/ecostructure")
install_github("kkdey/ecostructure", force-TRUE)
install_github("kkdey/ecostructure", force=TRUE)
install.packages("raster")
install.packages("rasterVis")
library(ecostructure)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda",
package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
dim(taxonomic_counts)
taxonomic_counts <- t(exprs(data))
dim(taxonomic_counts)
rowSums(taxonomic_counts)
system.time(out <- dash(comp_data = taxonomic_counts,
optmethod = "mixEM",
mode = m1,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
library(dash)
library(devtools)
#install_github("kkdey/ecostructure")
library(ecostructure)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda",
package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
rowSums(taxonomic_counts)
m1 <- colMeans(taxonomic_counts)
system.time(out <- dash(comp_data = taxonomic_counts,
optmethod = "mixEM",
mode = m1,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
rowSums(taxonomic_counts)
rowSums(taxonomic_counts)[35]
library(devtools)
#install_github("kkdey/ecostructure")
library(ecostructure)
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda",
package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
rowSums(taxonomic_counts)
taxonomic_counts <- taxonomic_counts +1
m1 <- colMeans(taxonomic_counts)
system.time(out <- dash(comp_data = taxonomic_counts,
optmethod = "mixEM",
mode = m1,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
apply(out$posterior_weights, 1, function(x) return(which.max(x)))
rowsums(out$posterior_weights)
rowSums(out$posterior_weights)
rowSums(taxonomic_counts)
taxonomic_counts[6,]
taxonomic_counts[2,]
data <- get(load(system.file("extdata", "HimalayanBirdsData.rda",
package = "ecostructure")))
taxonomic_counts <- t(exprs(data))
rowSums(taxonomic_counts)
taxonomic_counts_1 <- taxonomic_counts +1
m1 <- colMeans(taxonomic_counts_1)
system.time(out <- dash(comp_data = taxonomic_counts,
optmethod = "mixEM",
mode = m1,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
system.time(out <- dash(comp_data = taxonomic_counts_1,
optmethod = "mixEM",
mode = m1,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
m2 <- colMeans(taxonomic_counts)
system.time(out <- dash(comp_data = taxonomic_counts,
optmethod = "mixEM",
mode = m2,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 100, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
taxonomic_counts[35,]
m2
system.time(out <- dash(comp_data = taxonomic_counts_1,
optmethod = "mixEM",
mode = m1,
def_positions = list("center" = Inf, "null" = 1, "corner" = 1),
concentration = c(Inf, 100, 50, 20, 10, 5, 2, 1),
weight = list("center" = 10, "null" = 1, "corner" = 1),
bf = TRUE,
verbose=TRUE))
out$posterior_weights
apply(out$posterior_weights, 1, function(x) return(which.max(x)))
(0.33^3*0.01)^0.25
source("https://bioconductor.org/biocLite.R")
biocLite("cn.mops")
library(cn.mops)
BAMFiles <- list.files(pattern=".bam$")
BAMFiles
BAMFiles <- list.files(system.file("extdata", package="cn.mops"),pattern=".bam$",
full.names=TRUE)
BAMFiles
library(cn.mops)
BAMFiles <- list.files(system.file("extdata", package="cn.mops"),pattern=".bam$",
full.names=TRUE)
BAMFiles
bamDataRanges <- getReadCountsFromBAM(BAMFiles)
bamDataRanges
seqnames(bamDataRanges)
BAMFiles
res <- cn.mops(bamDataRanges)
res
data(cn.mops)
ls()
resCNMOPS <- cn.mops(XRanges)
resCNMOPS
?getReadCountsFromBAM
getReadCountsFromBAM
headerInfo <- Rsamtools::scanBamHeader(BAMFiles)
headerInfo
targets <- lapply(headerInfo, .subset2, 1)
targets
headerInfo
getReadCountsFromBAM
sn <- names(targets[[1]])
sl <- as.integer(targets[[1]])
message(paste("Identified the following reference sequences: ",
paste(unique(unlist(sn)), collapse = ",")))
if (missing(refSeqNames)) {
refSeqNames <- unique(unlist(sn))
message(paste("Missing \"refSeqNames\"! Selecting all identified reference sequence for analysis."))
}
else {
message("Using ", paste(refSeqNames, collapse = ", "),
" as reference.")
}
message("\n PLEASE BE PATIENT... this might take a while. Consider using the parallel version of this function.\n")
if (!(all(refSeqNames %in% unique(unlist(sn))))) {
stop("RefSeqNames does not match identified reference sequences.")
}
if (any(is.na(sn))) {
stop(paste(refSeqNames, "does not appear in header!"))
}
if (length(targets) > 1) {
for (i in 2:length(targets)) {
if (!(all(sn == names(targets[[i]])) & all(sl ==
as.integer(targets[[i]])))) {
stop(paste("Targets in Header file of ", BAMFiles[i],
" are not identical", "to the header of the file",
BAMFiles[1], "!"))
}
}
}
nidx <- match(refSeqNames, sn)
sn <- sn[nidx]
sl <- sl[nidx]
sl <- as.integer(unique(sl))
m <- length(sn)
GR <- GRanges()
headerInfo <- Rsamtools::scanBamHeader(BAMFiles)
targets <- lapply(headerInfo, .subset2, 1)
sn <- names(targets[[1]])
sl <- as.integer(targets[[1]])
refSeqNames <- NULL
message(paste("Identified the following reference sequences: ",
paste(unique(unlist(sn)), collapse = ",")))
if (missing(refSeqNames)) {
refSeqNames <- unique(unlist(sn))
message(paste("Missing \"refSeqNames\"! Selecting all identified reference sequence for analysis."))
}
refSeqNames
sn
else {
message("Using ", paste(refSeqNames, collapse = ", "),
" as reference.")
}
message("\n PLEASE BE PATIENT... this might take a while. Consider using the parallel version of this function.\n")
if (!(all(refSeqNames %in% unique(unlist(sn))))) {
stop("RefSeqNames does not match identified reference sequences.")
}
if (any(is.na(sn))) {
stop(paste(refSeqNames, "does not appear in header!"))
}
if (length(targets) > 1) {
for (i in 2:length(targets)) {
if (!(all(sn == names(targets[[i]])) & all(sl ==
as.integer(targets[[i]])))) {
stop(paste("Targets in Header file of ", BAMFiles[i],
" are not identical", "to the header of the file",
BAMFiles[1], "!"))
}
}
}
nidx <- match(refSeqNames, sn)
sn <- sn[nidx]
sl <- sl[nidx]
sl <- as.integer(unique(sl))
m <- length(sn)
GR <- GRanges()
GR
sl
sn
refSeqNames <- unique(unlist(sn))
headerInfo <- Rsamtools::scanBamHeader(BAMFiles)
targets <- lapply(headerInfo, .subset2, 1)
sn <- names(targets[[1]])
sl <- as.integer(targets[[1]])
refSeqNames <- unique(unlist(sn))
message("\n PLEASE BE PATIENT... this might take a while. Consider using the parallel version of this function.\n")
if (!(all(refSeqNames %in% unique(unlist(sn))))) {
stop("RefSeqNames does not match identified reference sequences.")
}
if (any(is.na(sn))) {
stop(paste(refSeqNames, "does not appear in header!"))
}
if (length(targets) > 1) {
for (i in 2:length(targets)) {
if (!(all(sn == names(targets[[i]])) & all(sl ==
as.integer(targets[[i]])))) {
stop(paste("Targets in Header file of ", BAMFiles[i],
" are not identical", "to the header of the file",
BAMFiles[1], "!"))
}
}
}
nidx <- match(refSeqNames, sn)
sn <- sn[nidx]
sl <- sl[nidx]
sl <- as.integer(unique(sl))
m <- length(sn)
GR <- GRanges()
sl
sn
m
GR
?exomeCopy::countBamInGRanges
BAMFiles <- list.files(system.file("extdata", package="cn.mops"),pattern=".bam$",
full.names=TRUE)
bamDataRanges <- getReadCountsFromBAM(BAMFiles)
res <- cn.mops(bamDataRanges)
bamDataRanges <- getReadCountsFromBAM(BAMFiles)
bamDataRanges
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
library(GenomicRanges)
gr <- GRanges(
seqnames = Rle(c("chr1", "chr2", "chr1", "chr3"), c(1, 3, 2, 4)),
ranges = IRanges(101:110, end = 111:120, names = head(letters, 10)),
strand = Rle(strand(c("-", "+", "*", "+", "-")), c(1, 2, 2, 3, 2)),
score = 1:10,
GC = seq(1, 0, length=10))
gr
seqnames(gr)
ranges(gr)
mcols(gr)
granges(gr)
length(gr)
names(gr)
seqlengths(gr)
gr[2:3]
gr[1:5]
gr[6:10]
gr[2:3, "GC"]
rep(gr, 3)
bamDataRanges <- getReadCountsFromBAM(BAMFiles)
res <- cn.mops(bamDataRanges)
res
bamDataRanges
data(cn.mops)
ls()
resCNMOPS <- cn.mops(XRanges)
resCNMOPS
resCNMOPS <- calcIntegerCopyNumbers(resCNMOPS)
resCNMOPS
resCNMOPS$CN
CNVRanges
exp(0.6)*4
exp(0.6)/4
